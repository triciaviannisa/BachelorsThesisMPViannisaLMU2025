{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPNRWbeswmC1LNEZ2XFjZOD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["!pip install fasttext"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fN1HqG0hjl0F","outputId":"879fbf59-30e7-4393-a80a-b91c759274f0","executionInfo":{"status":"ok","timestamp":1746618725080,"user_tz":-120,"elapsed":4249,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: fasttext in /usr/local/lib/python3.11/dist-packages (0.9.3)\n","Requirement already satisfied: pybind11>=2.2 in /usr/local/lib/python3.11/dist-packages (from fasttext) (2.13.6)\n","Requirement already satisfied: setuptools>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from fasttext) (75.2.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from fasttext) (2.0.2)\n"]}]},{"cell_type":"code","source":["!git clone https://github.com/IndoNLP/indonlu.git\n","%cd indonlu/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NWCCJDP3k87O","executionInfo":{"status":"ok","timestamp":1746618729933,"user_tz":-120,"elapsed":2222,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"36fa25df-61b0-4b13-cf7c-84d779d1456c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'indonlu'...\n","remote: Enumerating objects: 509, done.\u001b[K\n","remote: Counting objects: 100% (193/193), done.\u001b[K\n","remote: Compressing objects: 100% (83/83), done.\u001b[K\n","remote: Total 509 (delta 119), reused 139 (delta 110), pack-reused 316 (from 1)\u001b[K\n","Receiving objects: 100% (509/509), 9.46 MiB | 12.78 MiB/s, done.\n","Resolving deltas: 100% (239/239), done.\n","/content/indonlu\n"]}]},{"cell_type":"code","execution_count":4,"metadata":{"id":"vK1w06l8ibvM","executionInfo":{"status":"ok","timestamp":1746618751204,"user_tz":-120,"elapsed":18839,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}}},"outputs":[],"source":["import os, sys\n","\n","import random\n","import numpy as np\n","import pandas as pd\n","import torch\n","from torch import optim\n","import torch.nn.functional as F\n","from tqdm import tqdm\n","\n","from transformers import BertForSequenceClassification, BertConfig, BertTokenizer\n","from nltk.tokenize import TweetTokenizer\n","\n","sys.path.append('.')\n","from utils.forward_fn import forward_sequence_classification\n","from utils.metrics import document_sentiment_metrics_fn\n","from utils.data_utils import DocumentSentimentDataset, DocumentSentimentDataLoader"]},{"cell_type":"code","source":["# common functions\n","\n","def set_seed(seed):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed(seed)\n","\n","def count_param(module, trainable=False):\n","    if trainable:\n","        return sum(p.numel() for p in module.parameters() if p.requires_grad)\n","    else:\n","        return sum(p.numel() for p in module.parameters())\n","\n","def get_lr(optimizer):\n","    for param_group in optimizer.param_groups:\n","        return param_group['lr']\n","\n","def metrics_to_string(metric_dict):\n","    string_list = []\n","    for key, value in metric_dict.items():\n","        string_list.append('{}:{:.2f}'.format(key, value))\n","    return ' '.join(string_list)"],"metadata":{"id":"6mGvwRJKmC5q","executionInfo":{"status":"ok","timestamp":1746618752461,"user_tz":-120,"elapsed":8,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# set random seed\n","\n","set_seed(26092020)"],"metadata":{"id":"0xI4eAbzmE7j","executionInfo":{"status":"ok","timestamp":1746618754622,"user_tz":-120,"elapsed":4,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# load tokenizer and config\n","\n","tokenizer = BertTokenizer.from_pretrained('google-bert/bert-base-multilingual-cased')\n","config = BertConfig.from_pretrained('google-bert/bert-base-multilingual-cased')\n","config.num_labels = DocumentSentimentDataset.NUM_LABELS\n","\n","# instantiate model\n","\n","model = BertForSequenceClassification.from_pretrained('google-bert/bert-base-multilingual-cased', config=config)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZWOBFKW4mHaH","executionInfo":{"status":"ok","timestamp":1746619069445,"user_tz":-120,"elapsed":778,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"6ae2d041-b9ae-49c5-c639-7842c01f80e0"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of BertForSequenceClassification were not initialized from the model checkpoint at google-bert/bert-base-multilingual-cased and are newly initialized: ['classifier.bias', 'classifier.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"]}]},{"cell_type":"code","source":["train_dataset_path = './dataset/smsa_doc-sentiment-prosa/train_preprocess.tsv'\n","valid_dataset_path = './dataset/smsa_doc-sentiment-prosa/valid_preprocess.tsv'\n","test_dataset_path = './dataset/smsa_doc-sentiment-prosa/test_preprocess_masked_label.tsv'"],"metadata":{"id":"5IGvOjhLmOqB","executionInfo":{"status":"ok","timestamp":1746619073670,"user_tz":-120,"elapsed":8,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["train_dataset = DocumentSentimentDataset(train_dataset_path, tokenizer, lowercase=True)\n","valid_dataset = DocumentSentimentDataset(valid_dataset_path, tokenizer, lowercase=True)\n","test_dataset = DocumentSentimentDataset(test_dataset_path, tokenizer, lowercase=True)\n","\n","train_loader = DocumentSentimentDataLoader(dataset=train_dataset, max_seq_len=512, batch_size=32, num_workers=16, shuffle=True)\n","valid_loader = DocumentSentimentDataLoader(dataset=valid_dataset, max_seq_len=512, batch_size=32, num_workers=16, shuffle=False)\n","test_loader = DocumentSentimentDataLoader(dataset=test_dataset, max_seq_len=512, batch_size=32, num_workers=16, shuffle=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K-VvVYJemYIf","executionInfo":{"status":"ok","timestamp":1746619075501,"user_tz":-120,"elapsed":70,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"a053d4d3-99f9-4e5f-e34a-18fd30a8963a"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["w2i, i2w = DocumentSentimentDataset.LABEL2INDEX, DocumentSentimentDataset.INDEX2LABEL"],"metadata":{"id":"rbxw1H9FmcZ-","executionInfo":{"status":"ok","timestamp":1746619080586,"user_tz":-120,"elapsed":20,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# sentence with positive sentiment, example 1\n","\n","text = \"Aku sangat mencintai dirinya yang sangat sempurna untukku.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wj_eb6cN6gkY","executionInfo":{"status":"ok","timestamp":1746619081891,"user_tz":-120,"elapsed":297,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"d378aebb-1a54-4b0e-a89b-ed8fe749a696"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Aku sangat mencintai dirinya yang sangat sempurna untukku. | Label : negative (37.058%)\n"]}]},{"cell_type":"code","source":["# sentence with positive sentiment, example 2\n","\n","text = \"Dia sangat hebat karena sudah sangat pintar dan mandiri sejak kecil.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kjv7guNT6q8R","executionInfo":{"status":"ok","timestamp":1746619086225,"user_tz":-120,"elapsed":114,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"9c1fb19c-a386-4548-af0e-aab8440f84d8"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Dia sangat hebat karena sudah sangat pintar dan mandiri sejak kecil. | Label : positive (35.362%)\n"]}]},{"cell_type":"code","source":["# sentence with neutral sentiment, example 1\n","\n","text = \"Ayah memakan bubur ayam untuk sarapan tadi pagi.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NGkHNr9h7Mn9","executionInfo":{"status":"ok","timestamp":1746619088007,"user_tz":-120,"elapsed":137,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"c43af1e5-f9da-41ba-80b9-a42abc37d28b"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Ayah memakan bubur ayam untuk sarapan tadi pagi. | Label : negative (36.917%)\n"]}]},{"cell_type":"code","source":["# sentence with neutral sentiment, example 2\n","\n","text = \"Setiap hari, adikku berangkat sekolah pukul 7 pagi.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b0puruGz7RbK","executionInfo":{"status":"ok","timestamp":1746619089097,"user_tz":-120,"elapsed":136,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"55636e63-ff3a-44e5-adfd-ff4557626365"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Setiap hari, adikku berangkat sekolah pukul 7 pagi. | Label : negative (37.718%)\n"]}]},{"cell_type":"code","source":["# sentence with negative sentiment, example 1\n","\n","text = \"Temanku sangat benci ibunya yang tidak pernah ada di rumah.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dbmTpbNx7r4c","executionInfo":{"status":"ok","timestamp":1746619090433,"user_tz":-120,"elapsed":130,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"4023e226-2d23-42bb-b5b0-6469b3713984"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Temanku sangat benci ibunya yang tidak pernah ada di rumah. | Label : negative (36.669%)\n"]}]},{"cell_type":"code","source":["# sentence with negative sentiment, example 2\n","\n","text = \"Budi anak yang sangat malas dan tidak berguna.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ynu679xi7tmi","executionInfo":{"status":"ok","timestamp":1746619092163,"user_tz":-120,"elapsed":419,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"14ef2741-6ef6-4ad6-c981-3236e134a64d"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Budi anak yang sangat malas dan tidak berguna. | Label : negative (35.619%)\n"]}]},{"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model = model.to(device)\n","optimizer = optim.Adam(model.parameters(), lr=3e-6)"],"metadata":{"id":"4f-DgSpJmfTQ","executionInfo":{"status":"ok","timestamp":1746619093566,"user_tz":-120,"elapsed":387,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Train\n","n_epochs = 5\n","for epoch in range(n_epochs):\n","    model.train()\n","    torch.set_grad_enabled(True)\n","\n","    total_train_loss = 0\n","    list_hyp, list_label = [], []\n","\n","    train_pbar = tqdm(train_loader, leave=True, total=len(train_loader))\n","    for i, batch_data in enumerate(train_pbar):\n","        # Forward model\n","        loss, batch_hyp, batch_label = forward_sequence_classification(model, batch_data[:-1], i2w=i2w, device='cuda')\n","\n","        # Update model\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        tr_loss = loss.item()\n","        total_train_loss += tr_loss\n","\n","        # Calculate metrics\n","        list_hyp += batch_hyp\n","        list_label += batch_label\n","\n","        train_pbar.set_description(\"(Epoch {}) TRAIN LOSS:{:.4f} LR:{:.8f}\".format((epoch+1),\n","            total_train_loss/(i+1), get_lr(optimizer)))\n","\n","    # Calculate train metric\n","    metrics = document_sentiment_metrics_fn(list_hyp, list_label)\n","    print(\"(Epoch {}) TRAIN LOSS:{:.4f} {} LR:{:.8f}\".format((epoch+1),\n","        total_train_loss/(i+1), metrics_to_string(metrics), get_lr(optimizer)))\n","\n","    # Evaluate on validation\n","    model.eval()\n","    torch.set_grad_enabled(False)\n","\n","    total_loss, total_correct, total_labels = 0, 0, 0\n","    list_hyp, list_label = [], []\n","\n","    pbar = tqdm(valid_loader, leave=True, total=len(valid_loader))\n","    for i, batch_data in enumerate(pbar):\n","        batch_seq = batch_data[-1]\n","        loss, batch_hyp, batch_label = forward_sequence_classification(model, batch_data[:-1], i2w=i2w, device='cuda')\n","\n","        # Calculate total loss\n","        valid_loss = loss.item()\n","        total_loss += valid_loss\n","\n","        # Calculate evaluation metrics\n","        list_hyp += batch_hyp\n","        list_label += batch_label\n","        metrics = document_sentiment_metrics_fn(list_hyp, list_label)\n","\n","        pbar.set_description(\"VALID LOSS:{:.4f} {}\".format(total_loss/(i+1), metrics_to_string(metrics)))\n","\n","    metrics = document_sentiment_metrics_fn(list_hyp, list_label)\n","    print(\"(Epoch {}) VALID LOSS:{:.4f} {}\".format((epoch+1),\n","        total_loss/(i+1), metrics_to_string(metrics)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YMHPRrEQmys0","executionInfo":{"status":"ok","timestamp":1746620217700,"user_tz":-120,"elapsed":1121481,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"688ce322-6f6c-4697-c2b0-57e2a22789eb"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stderr","text":["(Epoch 1) TRAIN LOSS:0.6222 LR:0.00000300: 100%|██████████| 344/344 [03:29<00:00,  1.64it/s]\n"]},{"output_type":"stream","name":"stdout","text":["(Epoch 1) TRAIN LOSS:0.6222 ACC:0.73 F1:0.57 REC:0.56 PRE:0.69 LR:0.00000300\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/40 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n","VALID LOSS:0.4488 ACC:0.83 F1:0.78 REC:0.76 PRE:0.81: 100%|██████████| 40/40 [00:09<00:00,  4.08it/s]\n"]},{"output_type":"stream","name":"stdout","text":["(Epoch 1) VALID LOSS:0.4488 ACC:0.83 F1:0.78 REC:0.76 PRE:0.81\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/344 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n","(Epoch 2) TRAIN LOSS:0.3909 LR:0.00000300: 100%|██████████| 344/344 [03:35<00:00,  1.60it/s]\n"]},{"output_type":"stream","name":"stdout","text":["(Epoch 2) TRAIN LOSS:0.3909 ACC:0.85 F1:0.81 REC:0.81 PRE:0.82 LR:0.00000300\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/40 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n","VALID LOSS:0.3596 ACC:0.86 F1:0.82 REC:0.80 PRE:0.85: 100%|██████████| 40/40 [00:09<00:00,  4.11it/s]\n"]},{"output_type":"stream","name":"stdout","text":["(Epoch 2) VALID LOSS:0.3596 ACC:0.86 F1:0.82 REC:0.80 PRE:0.85\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/344 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n","(Epoch 3) TRAIN LOSS:0.3113 LR:0.00000300: 100%|██████████| 344/344 [03:35<00:00,  1.60it/s]\n"]},{"output_type":"stream","name":"stdout","text":["(Epoch 3) TRAIN LOSS:0.3113 ACC:0.88 F1:0.85 REC:0.85 PRE:0.86 LR:0.00000300\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/40 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n","VALID LOSS:0.3072 ACC:0.88 F1:0.84 REC:0.83 PRE:0.85: 100%|██████████| 40/40 [00:09<00:00,  4.18it/s]\n"]},{"output_type":"stream","name":"stdout","text":["(Epoch 3) VALID LOSS:0.3072 ACC:0.88 F1:0.84 REC:0.83 PRE:0.85\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/344 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n","(Epoch 4) TRAIN LOSS:0.2483 LR:0.00000300: 100%|██████████| 344/344 [03:35<00:00,  1.59it/s]\n"]},{"output_type":"stream","name":"stdout","text":["(Epoch 4) TRAIN LOSS:0.2483 ACC:0.91 F1:0.89 REC:0.89 PRE:0.89 LR:0.00000300\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/40 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n","VALID LOSS:0.2931 ACC:0.89 F1:0.85 REC:0.84 PRE:0.86: 100%|██████████| 40/40 [00:09<00:00,  4.06it/s]\n"]},{"output_type":"stream","name":"stdout","text":["(Epoch 4) VALID LOSS:0.2931 ACC:0.89 F1:0.85 REC:0.84 PRE:0.86\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/344 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n","(Epoch 5) TRAIN LOSS:0.2054 LR:0.00000300: 100%|██████████| 344/344 [03:35<00:00,  1.60it/s]\n"]},{"output_type":"stream","name":"stdout","text":["(Epoch 5) TRAIN LOSS:0.2054 ACC:0.93 F1:0.91 REC:0.91 PRE:0.91 LR:0.00000300\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/40 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n","VALID LOSS:0.2985 ACC:0.90 F1:0.86 REC:0.84 PRE:0.87: 100%|██████████| 40/40 [00:10<00:00,  4.00it/s]"]},{"output_type":"stream","name":"stdout","text":["(Epoch 5) VALID LOSS:0.2985 ACC:0.90 F1:0.86 REC:0.84 PRE:0.87\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["# evaluate on test\n","model.eval()\n","torch.set_grad_enabled(False)\n","\n","total_loss, total_correct, total_labels = 0, 0, 0\n","list_hyp, list_label = [], []\n","\n","pbar = tqdm(test_loader, leave=True, total=len(test_loader))\n","for i, batch_data in enumerate(pbar):\n","    _, batch_hyp, _ = forward_sequence_classification(model, batch_data[:-1], i2w=i2w, device='cuda')\n","    list_hyp += batch_hyp\n","\n","# save prediction\n","df = pd.DataFrame({'label':list_hyp}).reset_index()\n","df.to_csv('pred.txt', index=False)\n","\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f4BpqrVOu2fl","executionInfo":{"status":"ok","timestamp":1746620261477,"user_tz":-120,"elapsed":3362,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"bc39c213-e5f2-4f02-9ddb-b67fd0467475"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/16 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:624: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n","100%|██████████| 16/16 [00:03<00:00,  5.25it/s]"]},{"output_type":"stream","name":"stdout","text":["     index     label\n","0        0  positive\n","1        1  negative\n","2        2  negative\n","3        3  negative\n","4        4  negative\n","..     ...       ...\n","495    495  negative\n","496    496  negative\n","497    497   neutral\n","498    498  positive\n","499    499  negative\n","\n","[500 rows x 2 columns]\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["# sentence with positive sentiment, example 1\n","\n","text = \"Aku sangat mencintai dirinya yang sangat sempurna untukku.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ejIgq7t8dau","executionInfo":{"status":"ok","timestamp":1746620298238,"user_tz":-120,"elapsed":149,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"9d3573a2-7096-44ac-c18a-05762d96bdc9"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Aku sangat mencintai dirinya yang sangat sempurna untukku. | Label : positive (98.021%)\n"]}]},{"cell_type":"code","source":["# sentence with positive sentiment, example 2\n","\n","text = \"Dia sangat hebat karena sudah sangat pintar dan mandiri sejak kecil.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oJ4HFuCx8f0N","executionInfo":{"status":"ok","timestamp":1746620299109,"user_tz":-120,"elapsed":45,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"f793f49c-e18a-420c-dddd-690e6909411b"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Dia sangat hebat karena sudah sangat pintar dan mandiri sejak kecil. | Label : positive (97.975%)\n"]}]},{"cell_type":"code","source":["# sentence with neutral sentiment, example 1\n","\n","text = \"Ayah memakan bubur ayam untuk sarapan tadi pagi.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mluPBbyt8ikd","executionInfo":{"status":"ok","timestamp":1746620300791,"user_tz":-120,"elapsed":58,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"ddb28c1d-7ade-4258-e4ad-7f80ec8ce721"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Ayah memakan bubur ayam untuk sarapan tadi pagi. | Label : neutral (70.266%)\n"]}]},{"cell_type":"code","source":["# sentence with neutral sentiment, example 2\n","\n","text = \"Setiap hari, adikku berangkat sekolah pukul 7 pagi.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b-PkjZRX8lp_","executionInfo":{"status":"ok","timestamp":1746620302311,"user_tz":-120,"elapsed":46,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"788c173b-c382-4a51-c129-1f9a81316add"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Setiap hari, adikku berangkat sekolah pukul 7 pagi. | Label : neutral (93.122%)\n"]}]},{"cell_type":"code","source":["# sentence with negative sentiment, example 1\n","\n","text = \"Temanku sangat benci ibunya yang tidak pernah ada di rumah.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"83evbGPk8mCB","executionInfo":{"status":"ok","timestamp":1746620304154,"user_tz":-120,"elapsed":108,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"dab0ed85-a5db-415d-953e-a57424da01de"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Temanku sangat benci ibunya yang tidak pernah ada di rumah. | Label : positive (57.712%)\n"]}]},{"cell_type":"code","source":["# sentence with negative sentiment, example 2\n","\n","text = \"Budi anak yang sangat malas dan tidak berguna.\"\n","subwords = tokenizer.encode(text)\n","subwords = torch.LongTensor(subwords).view(1, -1).to(model.device)\n","\n","logits = model(subwords)[0]\n","label = torch.topk(logits, k=1, dim=-1)[1].squeeze().item()\n","\n","print(f'Text: {text} | Label : {i2w[label]} ({F.softmax(logits, dim=-1).squeeze()[label] * 100:.3f}%)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3HHq9Vw58pmt","executionInfo":{"status":"ok","timestamp":1746620306049,"user_tz":-120,"elapsed":84,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"ade07902-35ac-4176-e4d0-588ad104ef8c"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Text: Budi anak yang sangat malas dan tidak berguna. | Label : negative (96.028%)\n"]}]},{"cell_type":"code","source":["torch.save(model.state_dict(), 'mbert_fine_tuned_model.pth')\n","tokenizer.save_pretrained('./tokenizer')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N5f7kuKUvBBi","executionInfo":{"status":"ok","timestamp":1746620332202,"user_tz":-120,"elapsed":4036,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"369928dc-237f-43c5-f379-c225f224720e"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('./tokenizer/tokenizer_config.json',\n"," './tokenizer/special_tokens_map.json',\n"," './tokenizer/vocab.txt',\n"," './tokenizer/added_tokens.json')"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["from google.colab import files\n","\n","import shutil\n","files.download('mbert_fine_tuned_model.pth')\n","shutil.make_archive('tokenizer', 'zip', './tokenizer')\n","files.download('tokenizer.zip')"],"metadata":{"id":"JDWC1Ytwvxa1","executionInfo":{"status":"ok","timestamp":1746620359669,"user_tz":-120,"elapsed":167,"user":{"displayName":"Tricia Viannisa","userId":"05509285508876336804"}},"outputId":"cdd0ec9b-7c0f-4735-ac5e-c8916726a375","colab":{"base_uri":"https://localhost:8080/","height":17}},"execution_count":47,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_9e0b36af-9fb2-409e-8370-632ea03eb2f2\", \"mbert_fine_tuned_model.pth\", 711507747)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_094df151-30b8-4152-ab34-f926f3d366d9\", \"tokenizer.zip\", 549193)"]},"metadata":{}}]}]}